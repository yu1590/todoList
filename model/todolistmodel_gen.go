// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"github.com/zeromicro/go-zero/core/logx"
	"strings"
	"time"

	sqlxx "github.com/jmoiron/sqlx"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	todoListFieldNames          = builder.RawFieldNames(&TodoList{})
	todoListRows                = strings.Join(todoListFieldNames, ",")
	todoListRowsExpectAutoSet   = strings.Join(stringx.Remove(todoListFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	todoListRowsWithPlaceHolder = strings.Join(stringx.Remove(todoListFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	todoListModel interface {
		Insert(ctx context.Context, data *TodoList) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TodoList, error)
		Update(ctx context.Context, data *TodoList) error
		Delete(ctx context.Context, id int64) error
		GetTodoListByAccountIDAndTime(ctx context.Context, accountID int64, months []int64) ([]*TodoList, error)
	}

	defaultTodoListModel struct {
		conn  sqlx.SqlConn
		table string
	}

	TodoList struct {
		Id        int64          `db:"id"`         // 主键 id
		AccountId int64          `db:"account_id"` // 账户 id
		Time      time.Time      `db:"time"`       // 日程时间
		Month     int64          `db:"month"`      // 月份
		Extra     sql.NullString `db:"extra"`      // 日程详细信息
		Status    int64          `db:"status"`     // 状态 0:未完成 1:已完成
	}
)

func newTodoListModel(conn sqlx.SqlConn) *defaultTodoListModel {
	return &defaultTodoListModel{
		conn:  conn,
		table: "`todo_list`",
	}
}

func (m *defaultTodoListModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultTodoListModel) GetTodoListByAccountIDAndTime(ctx context.Context, accountID int64, months []int64) ([]*TodoList, error) {
	var resp []*TodoList
	q := fmt.Sprintf("select %s from %s where `account_id` = ? and month in (?)", todoListRows, m.table)
	query, args, err := sqlxx.In(q, accountID, months)
	if err != nil {
		logx.WithContext(ctx).Errorf("sqlxx.In error: %v", err)
		return nil, err
	}
	err = m.conn.QueryRowsCtx(ctx, &resp, query, args...)
	if err != nil {
		logx.WithContext(ctx).Errorf("QueryRowsCtx error: %v", err)
		return nil, err
	}
	return resp, nil
}

func (m *defaultTodoListModel) FindOne(ctx context.Context, id int64) (*TodoList, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", todoListRows, m.table)
	var resp TodoList
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTodoListModel) Insert(ctx context.Context, data *TodoList) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, todoListRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.AccountId, data.Time, data.Month, data.Extra, data.Status)
	return ret, err
}

func (m *defaultTodoListModel) Update(ctx context.Context, data *TodoList) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, todoListRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.AccountId, data.Time, data.Month, data.Extra, data.Status, data.Id)
	return err
}

func (m *defaultTodoListModel) tableName() string {
	return m.table
}
